//@version=5
indicator("Bitcoin Price Momentum Indicator", shorttitle="BTC Momentum", overlay=true)

// ============================================================================
// INPUT PARAMETERS
// ============================================================================

// Momentum calculation parameters
momentumPeriod = input.int(90, "Momentum Period (Days)", minval=30, maxval=365)
momentumSource = input.source(close, "Momentum Source")

// Visual parameters
showBands = input.bool(true, "Show Momentum Bands")
bandOpacity = input.int(50, "Band Opacity", minval=10, maxval=100)
overboughtColor = input.color(color.red, "Overbought Color")
oversoldColor = input.color(color.green, "Oversold Color")
neutralColor = input.color(color.yellow, "Neutral Color")

// Formula parameters (from your proven formula)
formulaA = input.float(3.928, "Formula Coefficient A", step=0.001)
formulaB = input.float(61.085, "Formula Coefficient B", step=0.001)

// ============================================================================
// CALCULATIONS
// ============================================================================

// Calculate momentum percentage over the specified period
// For weekly charts, we need to adjust the period calculation
momentumChange = ((momentumSource - momentumSource[momentumPeriod]) / momentumSource[momentumPeriod]) * 100

// Debug: Log the momentum calculation
// This should show different values for each bar

// Apply the proven formula: y = 3.928 * ln(x) + 61.085
// Where x is the momentum percentage, y is predicted drawdown
predictedDrawdown = 0.0
if momentumChange > 0
    predictedDrawdown := formulaA * math.log(momentumChange) + formulaB
else
    predictedDrawdown := 0.0

// Calculate potential price levels based on momentum
// Ensure these are proper price levels that scale with the chart
currentPrice = close
potentialDownside = currentPrice * (1 - predictedDrawdown / 100)
potentialUpside = currentPrice * (1 + predictedDrawdown / 100)

// Debug: Ensure we're getting dynamic values that scale with price axis
// These should change with each bar and scale properly when zooming

// Determine momentum state
momentumState = 0  // 0 = neutral, 1 = overbought, -1 = oversold
if momentumChange > 50  // High momentum threshold
    momentumState := 1
else if momentumChange < -50  // Low momentum threshold
    momentumState := -1

// ============================================================================
// PLOTTING
// ============================================================================

// Plot momentum bands - inspired by working BTCWavelets implementation
// Create proper price series that scale with the price axis

// Always plot the bands as continuous price levels for proper scaling
// The key is to ensure Pine Script can anchor these to the price axis
plot(showBands ? potentialDownside : na, "Lower Band", color=color.white, linewidth=2, style=plot.style_line)
plot(showBands ? potentialUpside : na, "Upper Band", color=color.white, linewidth=2, style=plot.style_line)

// Fill the area between bands based on momentum state
// This creates the colored zones that should scale properly
// Use conditional operators instead of if/else blocks for fill operations

// Overbought zone (red fill)
fill(plot(showBands and momentumState == 1 ? potentialDownside : na), plot(showBands and momentumState == 1 ? potentialUpside : na), color=color.new(overboughtColor, bandOpacity), title="Overbought Zone")

// Oversold zone (green fill)
fill(plot(showBands and momentumState == -1 ? potentialDownside : na), plot(showBands and momentumState == -1 ? potentialUpside : na), color=color.new(oversoldColor, bandOpacity), title="Oversold Zone")

// Neutral zone (yellow fill)
fill(plot(showBands and momentumState == 0 ? potentialDownside : na), plot(showBands and momentumState == 0 ? potentialUpside : na), color=color.new(neutralColor, bandOpacity), title="Neutral Zone")

// Remove the overlapping white line - no more current price reference line

// Debug: Plot individual price levels to verify calculations
plot(showBands ? potentialDownside : na, "Debug Downside", color=color.red, linewidth=1, style=plot.style_circles)
plot(showBands ? potentialUpside : na, "Debug Upside", color=color.blue, linewidth=1, style=plot.style_circles)

// Alternative approach: Create continuous price series that should scale properly
// Plot the bands as continuous lines that always have values
plot(showBands ? potentialDownside : close, "Continuous Lower", color=color.purple, linewidth=2, style=plot.style_line)
plot(showBands ? potentialUpside : close, "Continuous Upper", color=color.orange, linewidth=2, style=plot.style_line)

// Current price reference is now handled above in the momentum bands section

// ============================================================================
// TABLE DISPLAY
// ============================================================================

// Create table to display key metrics
if barstate.islast
    var table infoTable = table.new(position.top_right, 2, 7, bgcolor=color.white, border_width=1)
    
    table.cell(infoTable, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    
    table.cell(infoTable, 0, 1, "90-Day Momentum", text_color=color.black, bgcolor=color.white)
    table.cell(infoTable, 1, 1, str.tostring(momentumChange, "#.##") + "%", text_color=color.black, bgcolor=color.white)
    
    table.cell(infoTable, 0, 2, "Predicted Drawdown", text_color=color.black, bgcolor=color.white)
    table.cell(infoTable, 1, 2, str.tostring(predictedDrawdown, "#.##") + "%", text_color=color.black, bgcolor=color.white)
    
    table.cell(infoTable, 0, 3, "Potential Downside", text_color=color.black, bgcolor=color.white)
    table.cell(infoTable, 1, 3, "$" + str.tostring(potentialDownside, "#.##"), text_color=color.black, bgcolor=color.white)
    
    table.cell(infoTable, 0, 4, "Momentum State", text_color=color.black, bgcolor=color.white)
    stateText = momentumState == 1 ? "Overbought" : momentumState == -1 ? "Oversold" : "Neutral"
    stateColor = momentumState == 1 ? color.red : momentumState == -1 ? color.green : color.yellow
    table.cell(infoTable, 1, 4, stateText, text_color=color.white, bgcolor=stateColor)
    
    // Debug: Add more detailed information
    table.cell(infoTable, 0, 5, "Current Price", text_color=color.black, bgcolor=color.white)
    table.cell(infoTable, 1, 5, "$" + str.tostring(currentPrice, "#.##"), text_color=color.black, bgcolor=color.white)
    
    table.cell(infoTable, 0, 6, "Band Width", text_color=color.black, bgcolor=color.white)
    bandWidth = potentialUpside - potentialDownside
    table.cell(infoTable, 1, 6, "$" + str.tostring(bandWidth, "#.##"), text_color=color.black, bgcolor=color.white)

// ============================================================================
// ALERTS
// ============================================================================

// Alert conditions
alertcondition(momentumState == 1 and momentumState[1] != 1, "Overbought Alert", "Bitcoin entered overbought territory")
alertcondition(momentumState == -1 and momentumState[1] != -1, "Oversold Alert", "Bitcoin entered oversold territory")
alertcondition(momentumState == 0 and momentumState[1] != 0, "Neutral Alert", "Bitcoin returned to neutral momentum state")
